<%- include('header') %>
<nav class="navbar navbar-expand-lg navbar-dark shadow-sm">
  <div class="container">
    <a href="#" class="navbar-brand">Admin Dashboard</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav mx-auto">
        <li class="nav-item"><a href="/admin/dashboard" class="nav-link">Dashboard</a></li>
        <li class="nav-item"><a href="/admin/users" class="nav-link">Users</a></li>
        <li class="nav-item"><a href="/admin/banner" class="nav-link">Banner</a></li>
        <li class="nav-item"><a href="/admin/categories" class="nav-link">Categories</a></li>
        <li class="nav-item"><a href="/admin/product" class="nav-link">Products</a></li>
        <li class="nav-item"><a href="/admin/orders" class="nav-link">Orders</a></li>
        <li class="nav-item"><a href="/admin/coupons" class="nav-link">Coupons</a></li>
        <li class="nav-item"><a href="/admin/product-offers" class="nav-link">Offers</a></li>
      </ul>
      <a href="/admin/logout" class="btn btn-outline-danger fw-bold">Logout</a>
    </div>
  </div>
</nav>

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow-lg rounded-3">
        <div class="card-header header-custom text-center mb-2">
          <h3>Add Product</h3>
        </div>
        <% if (error) { %>
          <div class="alert alert-danger">
            <%= error %>
          </div>
        <% } %>        
        <div class="card-body">
          <form action="/admin/addproduct" method="POST" enctype="multipart/form-data" id="productForm" onsubmit="handleProductSubmit(event)">
            <div class="mb-3">
              <label for="productname" class="form-label">Product Name</label>
              <input type="text" id="productname" name="name" class="form-control" placeholder="Enter Product name" />
              <span id="productnameError" class="error"></span>
            </div>
                      
            <div class="mb-3">
              <label for="category" class="form-label">Product Category</label>
              <select id="category" name="category" class="form-select" required>
                <option value="" disabled>Select category</option>
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>" 
                          <%= product && product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                    <%= category.name %>
                  </option>
                <% }); %>
              </select>
            </div>
            
            <div class="mb-3">
              <label for="price" class="form-label">Product Price</label>
              <input type="number" id="price" name="price" class="form-control" placeholder="Enter product price" min="1"  />
              <span id="priceError" class="error"></span>
            </div>
            
            <div class="mb-3">
              <label for="offer" class="form-label">Offer Percentage (%)</label>
              <input type="number" class="form-control" name="offer" id="offer" min="0" max="100" value="0" />
              <span id="offerError" class="error"></span>
            </div>
            
            <div class="mb-3">
              <label for="description" class="form-label">Product Description</label>
              <textarea id="description" name="description" class="form-control" placeholder="Enter product description" rows="4" ></textarea>
              <span id="descriptionError" class="error"></span>
            </div>
            
            <div class="mb-3">
              <label for="stock" class="form-label">Number of Stock</label>
              <input type="number" id="stock" name="stock" class="form-control" placeholder="Enter number of stock" min="1"  />
              <span id="stockError" class="error"></span>
            </div>
            
            <div class="mb-3">
              <label for="images" class="form-label">Product Images</label>
              <input type="file" id="images" name="images" class="form-control mb-2" accept="image/*" multiple onchange="handleImageChange(event)" />
              <div class="img-container" style="display: none; width: 300px; height: 300px; overflow: hidden;">
                <img id="imagePreview" src="" alt="Image Preview" style="max-width: 100%; height: auto;"/>
              </div>
              <button type="button" class="btn btn-primary mt-2" id="cropBtn">Crop Image</button>
            </div>
            <div id="croppedResult"></div>
            <div class="d-grid">
              <button type="submit" class="btn btn-custom">Add Product</button>
            </div>
          </form>
        </div>

        <div class="card-footer text-center">
          <a href="/admin/product" class="btn btn-outline-secondary">Back to Products</a>
        </div>
      </div>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
  let cropper;

  document.addEventListener("DOMContentLoaded", function() {
      document.getElementById("images").addEventListener("change", function(event) {
          const file = event.target.files[0];
          if (!file) return;

          const reader = new FileReader();

          reader.onload = function(e) {
              const image = document.getElementById("imagePreview");
              image.src = e.target.result;

              // Ensure image is fully loaded before initializing Cropper
              image.onload = function() {
                  // Destroy any previous cropper instance if it exists
                  if (cropper) {
                      cropper.destroy();
                  }

                  // Initialize the cropper instance with desired options
                  cropper = new Cropper(image, {
                      aspectRatio: 1,
                      viewMode: 2,
                      autoCropArea: 0.8,
                      background: false
                  });

                  // Show the image container after the cropper is initialized
                  document.querySelector(".img-container").style.display = "block";
              };
          };

          reader.readAsDataURL(file);
      });

      // Handle crop button click and display cropped image
      document.getElementById("cropBtn").addEventListener("click", function() {
          if (!cropper) {
              alert("Please upload an image first.");
              return;
          }

          // Get the cropped image as a canvas
          const croppedCanvas = cropper.getCroppedCanvas();

          if (croppedCanvas) {
              const croppedImage = croppedCanvas.toDataURL();

              // Display cropped image in the 'croppedResult' div
              const croppedResult = document.getElementById("croppedResult");
              croppedResult.innerHTML = `<img src="${croppedImage}" style="max-width: 100%;">`;
          } else {
              console.log("Cropping failed");
          }
      });
  });
</script>

<script>
function handleProductSubmit (event) {
  event.preventDefault();
    const Name = document.getElementById("productname").value.trim();
    const Price = document.getElementById("price").value.trim();
    const Offer = document.getElementById("offer").value.trim();
    const Description = document.getElementById("description").value.trim();
    const Stock = document.getElementById("stock").value.trim();

    const productnameError = document.getElementById("productnameError");
    const priceError = document.getElementById("priceError");
    const offerError = document.getElementById("offerError");
    const descriptionError = document.getElementById("descriptionError");
    const stockError = document.getElementById("stockError");

    productnameError.textContent = "";
    priceError.textContent = "";
    offerError.textContent = "";
    descriptionError.textContent = "";
    stockError.textContent = "";

    let isValid = true;

    if (Name === "") {
        productnameError.textContent = "Product name is required.";
        productnameError.style.color = "red";
        isValid = false;
    }
    if (Price === "" || isNaN(Price) || Price <= 0) {
        priceError.textContent = "Valid price is required.";
        priceError.style.color = "red";
        isValid = false;
    }
    if (Offer === "" || isNaN(Offer) || Offer < 0 || Offer > 100) {
        offerError.textContent = "Offer should be between 0 and 100.";
        offerError.style.color = "red";
        isValid = false;
    }
    if (Description === "") {
        descriptionError.textContent = "Description is required.";
        descriptionError.style.color = "red";
        isValid = false;
    }
    if (Stock === "" || isNaN(Stock) || Stock < 1) {
        stockError.textContent = "Stock must be at least 1.";
        stockError.style.color = "red";
        isValid = false;
    }
    // Submit form if all fields are valid
    if (isValid) {
      document.getElementById("productForm").submit();
    }
}
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<%- include('footer') %>
