<%- include('header') %>
<nav class="navbar navbar-expand-lg navbar-dark shadow-sm">
  <div class="container">
    <a href="#" class="navbar-brand">Admin Dashboard</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav mx-auto">
        <li class="nav-item"><a href="/admin/dashboard" class="nav-link">Dashboard</a></li>
        <li class="nav-item"><a href="/admin/users" class="nav-link">Users</a></li>
        <li class="nav-item"><a href="/admin/banner" class="nav-link">Banner</a></li>
        <li class="nav-item"><a href="/admin/categories" class="nav-link">Categories</a></li>
        <li class="nav-item"><a href="/admin/product" class="nav-link">Products</a></li>
        <li class="nav-item"><a href="/admin/orders" class="nav-link">Orders</a></li>
        <li class="nav-item"><a href="/admin/coupons" class="nav-link">Coupons</a></li>
        <li class="nav-item"><a href="/admin/product-offers" class="nav-link">Offers</a></li>
      </ul>
      <a href="/admin/logout" class="btn btn-outline-danger fw-bold">Logout</a>
    </div>
  </div>
</nav>

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow-lg rounded-3">
        <div class="card-header header-custom text-center mb-2">
          <h3>Add Product</h3>
        </div>      
        <div class="card-body">
          <form action="/admin/addproduct" method="POST" enctype="multipart/form-data" id="productForm" onsubmit="handleProductSubmit(event)">
            <div class="mb-3">
              <label for="productname" class="form-label">Product Name</label>
              <input type="text" id="productname" name="name" class="form-control" placeholder="Enter Product name" />
              <span id="productnameError" class="error"></span>
            </div>
                      
            <div class="mb-3">
              <label for="category" class="form-label">Product Category</label>
              <select id="category" name="category" class="form-select" required>
                <option value="" disabled>Select category</option>
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>" 
                          <%= product && product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                    <%= category.name %>
                  </option>
                <% }); %>
              </select>
            </div>
            
            <div class="mb-3">
              <label for="price" class="form-label">Product Price</label>
              <input type="number" id="price" name="price" class="form-control" placeholder="Enter product price" min="1"  />
              <span id="priceError" class="error"></span>
            </div>
            <div class="mb-3">
              <label for="offerPrice" class="form-label">Offer Price</label>
              <input type="number" class="form-control" name="offerPrice" id="offerPrice" min="0" step="0.01" placeholder="Enter offer price" />
              <span id="offerPriceError" class="error"></span>
            </div>
            <div class="mb-3">
              <label for="description" class="form-label">Product Description</label>
              <textarea id="description" name="description" class="form-control" placeholder="Enter product description" rows="4" ></textarea>
              <span id="descriptionError" class="error"></span>
            </div>
            
            <div class="mb-3">
              <label for="stock" class="form-label">Number of Stock</label>
              <input type="number" id="stock" name="stock" class="form-control" placeholder="Enter number of stock" min="1"  />
              <span id="stockError" class="error"></span>
            </div>
            
            <div class="container mt-4">
              <label for="images" class="form-label">Upload Images</label>
              <input type="file" id="images" class="form-control" multiple accept="image/*">
              <div id="previewContainer" class="d-flex gap-2 flex-wrap mt-2"></div>
            </div>
            </div>
            <div class="d-grid">
              <button type="submit" class="btn btn-custom">Add Product</button>
            </div>
          </form>
        </div>

        <div class="card-footer text-center">
          <a href="/admin/product" class="btn btn-outline-secondary">Back to Products</a>
        </div>
      </div>
    </div>
  </div>
</div>
  <!-- Load Toastify before using it -->
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

  <% if (error) { %>
    <script>
      window.onload = function() {
        Toastify({
          text: "<%= error %>",
          duration: 3000,  
          close: true,
          gravity: "top",
          position: "right",
          backgroundColor: "red",  
        }).showToast();
      };
    </script>
  <% } %>
  <!-- Toastify JS -->
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/cropper.min.js"></script>
<script>
  document.getElementById('images').addEventListener('change', function(event) {
    const files = event.target.files;
    const imageContainer = document.getElementById('previewContainer');
    imageContainer.innerHTML = '';  // Clear previous preview if any.

    Array.from(files).forEach(file => {
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(event) {
                const imageBox = document.createElement('div');
                imageBox.classList.add('image-box');
                imageBox.style.position = 'relative';

                const img = document.createElement('img');
                img.src = event.target.result;
                img.classList.add('cropper-container');
                img.style.maxWidth = '200px';

                const saveBtn = document.createElement('button');
                saveBtn.innerText = 'Save Cropped Image';
                saveBtn.classList.add('save-btn');
                saveBtn.style.marginTop = '10px';

                imageBox.appendChild(img);
                imageBox.appendChild(saveBtn);
                imageContainer.appendChild(imageBox);

                // Initialize Cropper after image is loaded.
                const cropper = new Cropper(img, {
                    aspectRatio: 1,  // Optional: Customize as needed
                    viewMode: 2,     // Optional: Allows zooming and panning.
                    responsive: true,
                    autoCropArea: 0.65
                });

                // Save the cropped image when the button is clicked.
                saveBtn.addEventListener('click', function() {
                    const croppedCanvas = cropper.getCroppedCanvas();
                    if (croppedCanvas) {
                        const croppedImage = croppedCanvas.toDataURL('image/png');
                        console.log('Cropped Image:', croppedImage); // You can upload this image to your server if needed
                        // You can also use the `croppedImage` to replace the preview or upload to your server.
                    }
                });
            };
            reader.readAsDataURL(file);
        }
    });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
      const imageInput = document.getElementById("images");
      const previewContainer = document.getElementById("previewContainer");
      let imageFiles = [];

      imageInput.addEventListener("change", function (event) {
          const files = Array.from(event.target.files);

          if (imageFiles.length + files.length < 3) {
              alert("You need to upload a minimum of 3 images.");
              return;
          }

          files.forEach((file) => {
              if (!file.type.startsWith("image/")) return;

              const reader = new FileReader();
              reader.onload = function (e) {
                  const imgIndex = imageFiles.length;
                  imageFiles.push(file);

                  const imgWrapper = document.createElement("div");
                  imgWrapper.className = "position-relative d-inline-block m-2";
                  
                  const img = document.createElement("img");
                  img.src = e.target.result;
                  img.className = "img-thumbnail";
                  img.style.width = "100px";
                  img.style.cursor = "pointer";

                  const replaceInput = document.createElement("input");
                  replaceInput.type = "file";
                  replaceInput.className = "d-none";
                  replaceInput.accept = "image/*";

                  replaceInput.addEventListener("change", function (e) {
                      const newFile = e.target.files[0];
                      if (!newFile.type.startsWith("image/")) return;

                      const newReader = new FileReader();
                      newReader.onload = function (event) {
                          img.src = event.target.result;
                          imageFiles[imgIndex] = newFile;
                      };
                      newReader.readAsDataURL(newFile);
                  });

                  img.addEventListener("click", function () {
                      replaceInput.click();
                  });

                  const deleteButton = document.createElement("button");
                  deleteButton.innerHTML = "X";
                  deleteButton.className = "btn btn-danger btn-sm position-absolute";
                  deleteButton.style.top = "0";
                  deleteButton.style.right = "0";
                  deleteButton.style.borderRadius = "50%";

                  deleteButton.addEventListener("click", function () {
                      if (imageFiles.length > 3) {
                          imageFiles.splice(imgIndex, 1);
                          previewContainer.removeChild(imgWrapper);
                      } else {
                          alert("You must have at least 3 images.");
                      }
                  });

                  imgWrapper.appendChild(img);
                  imgWrapper.appendChild(replaceInput);
                  imgWrapper.appendChild(deleteButton);
                  previewContainer.appendChild(imgWrapper);
              };
              reader.readAsDataURL(file);
          });

          imageInput.value = ""; // Reset input field after selection
      });
  });
</script>

<script>
function handleProductSubmit (event) {
  event.preventDefault();
    const Name = document.getElementById("productname").value.trim();
    const Price = document.getElementById("price").value.trim();
    const Offer = document.getElementById("offerPrice").value.trim();
    const Description = document.getElementById("description").value.trim();
    const Stock = document.getElementById("stock").value.trim();

    const productnameError = document.getElementById("productnameError");
    const priceError = document.getElementById("priceError");
    const offerError = document.getElementById("offerPriceError");
    const descriptionError = document.getElementById("descriptionError");
    const stockError = document.getElementById("stockError");

    productnameError.textContent = "";
    priceError.textContent = "";
    offerError.textContent = "";
    descriptionError.textContent = "";
    stockError.textContent = "";

    let isValid = true;

    if (Name === "") {
        productnameError.textContent = "Product name is required.";
        productnameError.style.color = "red";
        isValid = false;
    }
    if (Price === "" || isNaN(Price) || Price <= 0) {
        priceError.textContent = "Valid price is required.";
        priceError.style.color = "red";
        isValid = false;
    }
    if (Offer === "" || Offer < 0 ) {
        offerError.textContent = "Offer price should be min 0";
        offerError.style.color = "red";
        isValid = false;
    }
    if (Description === "") {
        descriptionError.textContent = "Description is required.";
        descriptionError.style.color = "red";
        isValid = false;
    }
    if (Stock === "" || isNaN(Stock) || Stock < 1) {
        stockError.textContent = "Stock must be at least 1.";
        stockError.style.color = "red";
        isValid = false;
    }
    // Submit form if all fields are valid
    if (isValid) {
      document.getElementById("productForm").submit();
    }
}
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<%- include('footer') %>
